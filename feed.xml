<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://saigoupi.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://saigoupi.github.io/" rel="alternate" type="text/html" /><updated>2025-10-15T14:40:30+00:00</updated><id>https://saigoupi.github.io/feed.xml</id><title type="html">赛狗屁的技术空间 | 游戏 WEB 金融</title><subtitle>欢迎来到赛狗屁的个人博客！这里是一个关于游戏开发、Web开发、经济学和金融的知识分享平台。</subtitle><author><name>赛狗屁</name></author><entry><title type="html">Python实现监控BSC链上FOUR平台发射的代币</title><link href="https://saigoupi.github.io/web3/bscscan.html" rel="alternate" type="text/html" title="Python实现监控BSC链上FOUR平台发射的代币" /><published>2025-10-15T00:00:00+00:00</published><updated>2025-10-15T00:00:00+00:00</updated><id>https://saigoupi.github.io/web3/bscscan</id><content type="html" xml:base="https://saigoupi.github.io/web3/bscscan.html"><![CDATA[<h2 id="为什么要做这个">为什么要做这个</h2>
<ul>
  <li>Python的web3库的练习</li>
  <li>最近BSC的MEME很火，写这个工具玩一玩</li>
</ul>

<h2 id="工具准备">工具准备</h2>
<ul>
  <li>Python</li>
  <li><a href="https://etherscan.io/apis">Etherscan官网注册获取免费API</a></li>
</ul>

<h2 id="设计思路">设计思路</h2>
<ul>
  <li>
    <p>在<a href="https://bscscan.com/">BSC浏览器</a>里查看<a href="https://four.meme/zh-TW">FOUR</a>平台发射出来的代币，发现其代币的智能合约是通过工厂模式创建的。
<img src="../assets/img/posts/2025-10-15-bscscan/image.png" alt="alt text" /></p>
  </li>
  <li>
    <p>很容易找到FOUR的工厂合约地址： <code class="language-plaintext highlighter-rouge">0x5c952063c7fc8610FFDB798152D69F0B9550762b</code>
<img src="../assets/img/posts/2025-10-15-bscscan/image-2.png" alt="alt text" /></p>
  </li>
  <li>
    <p>查看这条哈希，然后在 <code class="language-plaintext highlighter-rouge">Internal Txns</code> 内部交易中找到CREATE方法的调用，就说明这笔交易创建了一个新代币，在交易的 <code class="language-plaintext highlighter-rouge">To</code> 值里，找到新代币的合约地址
<img src="../assets/img/posts/2025-10-15-bscscan/image-1.png" alt="alt text" /></p>
  </li>
  <li>
    <p>所以代码的执行思路：
1.轮询BSC的区块，找到 <code class="language-plaintext highlighter-rouge">To</code> 是FOUR工厂合约的哈希
2.提取每个哈希里的 <code class="language-plaintext highlighter-rouge">Internal Txns</code> 交易，如果里面有CREATE方法的调用，那么这次交易则创建了一个新代币，代币的合约地址就是 <code class="language-plaintext highlighter-rouge">To</code> 的地址
3.调用代币合约的方法，获得代币的名称</p>
  </li>
</ul>

<h2 id="代码实现">代码实现</h2>

<p>轮询区块，找到 <code class="language-plaintext highlighter-rouge">To</code> 为工厂合约的哈希</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">tx</span> <span class="ow">in</span> <span class="n">block</span><span class="p">[</span><span class="sh">'</span><span class="s">transactions</span><span class="sh">'</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">tx</span><span class="p">[</span><span class="sh">'</span><span class="s">to</span><span class="sh">'</span><span class="p">]</span> <span class="ow">and</span> <span class="n">tx</span><span class="p">[</span><span class="sh">'</span><span class="s">to</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">FACTORY_ADDRESS</span><span class="p">:</span>
        <span class="n">txStr</span> <span class="o">=</span> <span class="sh">'</span><span class="s">0x</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">tx</span><span class="p">[</span><span class="sh">'</span><span class="s">hash</span><span class="sh">'</span><span class="p">].</span><span class="nf">hex</span><span class="p">())</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">检查交易:</span><span class="si">{</span><span class="n">txStr</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">new_addrs</span><span class="p">,</span> <span class="n">error</span> <span class="o">=</span> <span class="nf">v2_internal_txns</span><span class="p">(</span><span class="n">txStr</span><span class="p">)</span>
</code></pre></div></div>

<p>检查哈希的 <code class="language-plaintext highlighter-rouge">Internal Txns</code> 里是否有CREATE的函数调用，如果有，获取 <code class="language-plaintext highlighter-rouge">To</code> 的合约即为新代币合约地址</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">v2_internal_txns</span><span class="p">(</span><span class="n">tx_hash</span><span class="p">,</span> <span class="n">use_batch</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">使用Etherscan V2 API获取Internal TXNs（chainid=56）</span><span class="sh">"""</span>
    <span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://api.etherscan.io/v2/api</span><span class="sh">"</span>  <span class="c1"># V2统一端点
</span>    <span class="bp">...</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># 单tx
</span>        <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">chainid</span><span class="sh">'</span><span class="p">:</span> <span class="mi">56</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">module</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">account</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">action</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">txlistinternal</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">txhash</span><span class="sh">'</span><span class="p">:</span> <span class="n">tx_hash</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">apikey</span><span class="sh">'</span><span class="p">:</span> <span class="n">ETHERSCAN_API_KEY</span>
        <span class="p">}</span>
    
    <span class="k">try</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="n">params</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">DEBUG: V2 URL: </span><span class="si">{</span><span class="n">url</span><span class="si">}</span><span class="s">, 状态码: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">DEBUG: 响应内容: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">[</span><span class="si">:</span><span class="mi">300</span><span class="p">]</span><span class="si">}</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 截断调试
</span>        
        <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">!=</span> <span class="mi">200</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[],</span> <span class="sa">f</span><span class="sh">"</span><span class="s">HTTP </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="si">}</span><span class="sh">"</span>
        
        <span class="n">data</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">status</span><span class="sh">'</span><span class="p">)</span> <span class="o">==</span> <span class="sh">'</span><span class="s">1</span><span class="sh">'</span> <span class="ow">and</span> <span class="sh">'</span><span class="s">result</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
            <span class="n">new_addresses</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">txn</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">result</span><span class="sh">'</span><span class="p">]:</span>
                <span class="n">contractAddr</span> <span class="o">=</span> <span class="n">txn</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">contractAddress</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>  <span class="c1"># e.g., "create2_0_1_1_1"
</span>                <span class="n">txn_type</span> <span class="o">=</span> <span class="n">txn</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">lower</span><span class="p">()</span>
                <span class="n">to_addr</span> <span class="o">=</span> <span class="n">txn</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">to</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">txn_type</span> <span class="o">==</span> <span class="sh">'</span><span class="s">create2</span><span class="sh">'</span> <span class="ow">and</span> <span class="n">to_addr</span> <span class="o">==</span> <span class="sh">''</span> <span class="ow">and</span> <span class="n">contractAddr</span><span class="p">:</span>
                    <span class="n">new_addresses</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">Web3</span><span class="p">.</span><span class="nf">to_checksum_address</span><span class="p">(</span><span class="n">contractAddr</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">new_addresses</span><span class="p">,</span> <span class="bp">None</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[],</span> <span class="sa">f</span><span class="sh">"</span><span class="s">API错误: </span><span class="si">{</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">未知</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
    <span class="k">except</span> <span class="n">json</span><span class="p">.</span><span class="n">JSONDecodeError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[],</span> <span class="sa">f</span><span class="sh">"</span><span class="s">JSON解析失败 (可能是404/非JSON): </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">[</span><span class="si">:</span><span class="mi">100</span><span class="p">]</span><span class="si">}</span><span class="s"> - </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[],</span> <span class="sa">f</span><span class="sh">"</span><span class="s">V2 API调用失败: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
</code></pre></div></div>

<p>检查代币的合约地址，获取代币的名字</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">is_bep20_token</span><span class="p">(</span><span class="n">contract_address</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">验证BEP-20代币</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">w3</span><span class="p">.</span><span class="n">eth</span><span class="p">.</span><span class="nf">get_code</span><span class="p">(</span><span class="n">contract_address</span><span class="p">)</span> <span class="o">==</span> <span class="sh">'</span><span class="s">0x</span><span class="sh">'</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">非合约地址</span><span class="sh">"</span>
        <span class="n">contract</span> <span class="o">=</span> <span class="n">w3</span><span class="p">.</span><span class="n">eth</span><span class="p">.</span><span class="nf">contract</span><span class="p">(</span><span class="n">address</span><span class="o">=</span><span class="n">contract_address</span><span class="p">,</span> <span class="n">abi</span><span class="o">=</span><span class="n">BEP20_ABI</span><span class="p">)</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">contract</span><span class="p">.</span><span class="n">functions</span><span class="p">.</span><span class="nf">name</span><span class="p">().</span><span class="nf">call</span><span class="p">()</span>
        <span class="n">symbol</span> <span class="o">=</span> <span class="n">contract</span><span class="p">.</span><span class="n">functions</span><span class="p">.</span><span class="nf">symbol</span><span class="p">().</span><span class="nf">call</span><span class="p">()</span>
        <span class="k">return</span> <span class="bp">True</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">symbol</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">非BEP-20或调用失败: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
</code></pre></div></div>

<p>完整代码如下，其中<code class="language-plaintext highlighter-rouge">ETHERSCAN_API_KEY</code>需要更换成自己的API Key，去这里注册<a href="https://etherscan.io/apis">Etherscan官网注册获取免费API</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">web3</span> <span class="kn">import</span> <span class="n">Web3</span>
<span class="kn">from</span> <span class="n">web3.middleware</span> <span class="kn">import</span> <span class="n">ExtraDataToPOAMiddleware</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">requests</span>
<span class="kn">from</span> <span class="n">hexbytes</span> <span class="kn">import</span> <span class="n">HexBytes</span>

<span class="c1"># BSC RPC（测试debug_trace支持；若失败，换Ankr: https://rpc.ankr.com/bsc）
</span><span class="n">RPC_URL</span> <span class="o">=</span> <span class="sh">'</span><span class="s">https://bsc-dataseed1.binance.org/</span><span class="sh">'</span>  <span class="c1"># 或 'https://bsc.rpc.blxrbdn.com/' 支持trace
</span><span class="n">w3</span> <span class="o">=</span> <span class="nc">Web3</span><span class="p">(</span><span class="n">Web3</span><span class="p">.</span><span class="nc">HTTPProvider</span><span class="p">(</span><span class="n">RPC_URL</span><span class="p">))</span>

<span class="c1"># 添加POA中间件,因为BSC有一部分POA网络血统,需要添加POA中间件
</span><span class="n">w3</span><span class="p">.</span><span class="n">middleware_onion</span><span class="p">.</span><span class="nf">inject</span><span class="p">(</span><span class="n">ExtraDataToPOAMiddleware</span><span class="p">,</span> <span class="n">layer</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> 

<span class="c1"># BEP-20验证ABI
</span><span class="n">BEP20_ABI</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">constant</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">inputs</span><span class="sh">"</span><span class="p">:</span> <span class="p">[],</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs</span><span class="sh">"</span><span class="p">:</span> <span class="p">[{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">}],</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">constant</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">inputs</span><span class="sh">"</span><span class="p">:</span> <span class="p">[],</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">symbol</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs</span><span class="sh">"</span><span class="p">:</span> <span class="p">[{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">}],</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">}</span>
<span class="p">]</span>

<span class="c1"># FORM工厂地址
</span><span class="n">FACTORY_ADDRESS</span> <span class="o">=</span> <span class="sh">'</span><span class="s">0x5c952063c7fc8610FFDB798152D69F0B9550762b</span><span class="sh">'</span>

<span class="c1"># Etherscan/BscScan V2 API Key（免费：https://etherscan.io/myapikey 或 bscscan.com/myapikey）
</span><span class="n">ETHERSCAN_API_KEY</span> <span class="o">=</span> <span class="sh">''</span>  <span class="c1"># 共享key
</span>
<span class="c1"># BEP-20验证ABI
</span><span class="n">BEP20_ABI</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">constant</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">inputs</span><span class="sh">"</span><span class="p">:</span> <span class="p">[],</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs</span><span class="sh">"</span><span class="p">:</span> <span class="p">[{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">}],</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">constant</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">inputs</span><span class="sh">"</span><span class="p">:</span> <span class="p">[],</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">symbol</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs</span><span class="sh">"</span><span class="p">:</span> <span class="p">[{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">}],</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">}</span>
<span class="p">]</span>

<span class="k">def</span> <span class="nf">is_bep20_token</span><span class="p">(</span><span class="n">contract_address</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">验证BEP-20代币</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">w3</span><span class="p">.</span><span class="n">eth</span><span class="p">.</span><span class="nf">get_code</span><span class="p">(</span><span class="n">contract_address</span><span class="p">)</span> <span class="o">==</span> <span class="sh">'</span><span class="s">0x</span><span class="sh">'</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">非合约地址</span><span class="sh">"</span>
        <span class="n">contract</span> <span class="o">=</span> <span class="n">w3</span><span class="p">.</span><span class="n">eth</span><span class="p">.</span><span class="nf">contract</span><span class="p">(</span><span class="n">address</span><span class="o">=</span><span class="n">contract_address</span><span class="p">,</span> <span class="n">abi</span><span class="o">=</span><span class="n">BEP20_ABI</span><span class="p">)</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">contract</span><span class="p">.</span><span class="n">functions</span><span class="p">.</span><span class="nf">name</span><span class="p">().</span><span class="nf">call</span><span class="p">()</span>
        <span class="n">symbol</span> <span class="o">=</span> <span class="n">contract</span><span class="p">.</span><span class="n">functions</span><span class="p">.</span><span class="nf">symbol</span><span class="p">().</span><span class="nf">call</span><span class="p">()</span>
        <span class="k">return</span> <span class="bp">True</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">symbol</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">非BEP-20或调用失败: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">v2_internal_txns</span><span class="p">(</span><span class="n">tx_hash</span><span class="p">,</span> <span class="n">use_batch</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">使用Etherscan V2 API获取Internal TXNs（chainid=56）</span><span class="sh">"""</span>
    <span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://api.etherscan.io/v2/api</span><span class="sh">"</span>  <span class="c1"># V2统一端点
</span>    <span class="k">if</span> <span class="n">use_batch</span><span class="p">:</span>
        <span class="c1"># 批量：用address + 区块范围（更高效，避免单tx 404）
</span>        <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">chainid</span><span class="sh">'</span><span class="p">:</span> <span class="mi">56</span><span class="p">,</span>  <span class="c1"># BSC
</span>            <span class="sh">'</span><span class="s">module</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">account</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">action</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">txlistinternal</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">address</span><span class="sh">'</span><span class="p">:</span> <span class="n">FACTORY_ADDRESS</span><span class="p">,</span>  <span class="c1"># 工厂地址
</span>            <span class="sh">'</span><span class="s">startblock</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">0</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">endblock</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">latest</span><span class="sh">'</span><span class="p">,</span>  <span class="c1"># 或指定recent block
</span>            <span class="sh">'</span><span class="s">page</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">offset</span><span class="sh">'</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>  <span class="c1"># 最近10笔
</span>            <span class="sh">'</span><span class="s">sort</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">desc</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">apikey</span><span class="sh">'</span><span class="p">:</span> <span class="n">ETHERSCAN_API_KEY</span>
        <span class="p">}</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># 单tx
</span>        <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">chainid</span><span class="sh">'</span><span class="p">:</span> <span class="mi">56</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">module</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">account</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">action</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">txlistinternal</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">txhash</span><span class="sh">'</span><span class="p">:</span> <span class="n">tx_hash</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">apikey</span><span class="sh">'</span><span class="p">:</span> <span class="n">ETHERSCAN_API_KEY</span>
        <span class="p">}</span>
    
    <span class="k">try</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="n">params</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">DEBUG: V2 URL: </span><span class="si">{</span><span class="n">url</span><span class="si">}</span><span class="s">, 状态码: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">DEBUG: 响应内容: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">[</span><span class="si">:</span><span class="mi">300</span><span class="p">]</span><span class="si">}</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 截断调试
</span>        
        <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">!=</span> <span class="mi">200</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[],</span> <span class="sa">f</span><span class="sh">"</span><span class="s">HTTP </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="si">}</span><span class="sh">"</span>
        
        <span class="n">data</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">status</span><span class="sh">'</span><span class="p">)</span> <span class="o">==</span> <span class="sh">'</span><span class="s">1</span><span class="sh">'</span> <span class="ow">and</span> <span class="sh">'</span><span class="s">result</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
            <span class="n">new_addresses</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">txn</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">result</span><span class="sh">'</span><span class="p">]:</span>
                <span class="n">contractAddr</span> <span class="o">=</span> <span class="n">txn</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">contractAddress</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>  <span class="c1"># e.g., "create2_0_1_1_1"
</span>                <span class="n">txn_type</span> <span class="o">=</span> <span class="n">txn</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">lower</span><span class="p">()</span>
                <span class="n">to_addr</span> <span class="o">=</span> <span class="n">txn</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">to</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">txn_type</span> <span class="o">==</span> <span class="sh">'</span><span class="s">create2</span><span class="sh">'</span> <span class="ow">and</span> <span class="n">to_addr</span> <span class="o">==</span> <span class="sh">''</span> <span class="ow">and</span> <span class="n">contractAddr</span><span class="p">:</span>
                    <span class="n">new_addresses</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">Web3</span><span class="p">.</span><span class="nf">to_checksum_address</span><span class="p">(</span><span class="n">contractAddr</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">new_addresses</span><span class="p">,</span> <span class="bp">None</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[],</span> <span class="sa">f</span><span class="sh">"</span><span class="s">API错误: </span><span class="si">{</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">未知</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
    <span class="k">except</span> <span class="n">json</span><span class="p">.</span><span class="n">JSONDecodeError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[],</span> <span class="sa">f</span><span class="sh">"</span><span class="s">JSON解析失败 (可能是404/非JSON): </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">[</span><span class="si">:</span><span class="mi">100</span><span class="p">]</span><span class="si">}</span><span class="s"> - </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[],</span> <span class="sa">f</span><span class="sh">"</span><span class="s">V2 API调用失败: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># 此功能实现有问题，暂时不用
</span><span class="k">def</span> <span class="nf">methodCheck</span><span class="p">(</span><span class="n">tx</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">检查交易是否为CREATE2</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">input_data</span> <span class="o">=</span> <span class="n">tx</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">input</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">0x</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">input_data</span> <span class="o">==</span> <span class="sh">'</span><span class="s">0x</span><span class="sh">'</span> <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">input_data</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        
        <span class="n">method_id</span> <span class="o">=</span> <span class="sh">'</span><span class="s">0x</span><span class="sh">'</span> <span class="o">+</span> <span class="p">(</span><span class="n">input_data</span><span class="p">).</span><span class="nf">hex</span><span class="p">()</span>
        <span class="k">if</span> <span class="sh">'</span><span class="s">519ebb10</span><span class="sh">'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">method_id</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">方法检查失败: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">False</span>

<span class="k">def</span> <span class="nf">monitor_factory_create2</span><span class="p">(</span><span class="n">last_block</span><span class="o">=</span><span class="sh">'</span><span class="s">latest</span><span class="sh">'</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">监控工厂交易，使用V2 API检测CREATE2</span><span class="sh">"""</span>
    <span class="n">last_block_num</span> <span class="o">=</span> <span class="n">w3</span><span class="p">.</span><span class="n">eth</span><span class="p">.</span><span class="n">block_number</span> <span class="k">if</span> <span class="n">last_block</span> <span class="o">==</span> <span class="sh">'</span><span class="s">latest</span><span class="sh">'</span> <span class="k">else</span> <span class="nf">int</span><span class="p">(</span><span class="n">last_block</span><span class="p">)</span>
    <span class="n">current_block</span> <span class="o">=</span> <span class="n">last_block_num</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">current_block</span> <span class="o">&gt;</span> <span class="n">last_block_num</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">检测到新区块: </span><span class="si">{</span><span class="n">current_block</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">w3</span><span class="p">.</span><span class="n">eth</span><span class="p">.</span><span class="nf">get_block</span><span class="p">(</span><span class="n">current_block</span><span class="p">,</span> <span class="n">full_transactions</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            
            <span class="k">for</span> <span class="n">tx</span> <span class="ow">in</span> <span class="n">block</span><span class="p">[</span><span class="sh">'</span><span class="s">transactions</span><span class="sh">'</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">tx</span><span class="p">[</span><span class="sh">'</span><span class="s">to</span><span class="sh">'</span><span class="p">]</span> <span class="ow">and</span> <span class="n">tx</span><span class="p">[</span><span class="sh">'</span><span class="s">to</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">FACTORY_ADDRESS</span><span class="p">:</span>
                    <span class="n">txStr</span> <span class="o">=</span> <span class="sh">'</span><span class="s">0x</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">tx</span><span class="p">[</span><span class="sh">'</span><span class="s">hash</span><span class="sh">'</span><span class="p">].</span><span class="nf">hex</span><span class="p">())</span>
                    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">检查交易:</span><span class="si">{</span><span class="n">txStr</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                    <span class="n">new_addrs</span><span class="p">,</span> <span class="n">error</span> <span class="o">=</span> <span class="nf">v2_internal_txns</span><span class="p">(</span><span class="n">txStr</span><span class="p">)</span>

                    <span class="k">if</span> <span class="n">error</span><span class="p">:</span>
                        <span class="c1">#print(f"V2单tx失败: {error}")
</span>                        <span class="k">continue</span>
                    <span class="c1"># 处理new_addrs...
</span>                    <span class="k">for</span> <span class="n">addr</span> <span class="ow">in</span> <span class="n">new_addrs</span><span class="p">:</span>
                        <span class="n">is_token</span><span class="p">,</span> <span class="n">details</span> <span class="o">=</span> <span class="nf">is_bep20_token</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
                        <span class="k">if</span> <span class="n">is_token</span><span class="p">:</span>
                            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">🚀 FORM CREATE2新代币: </span><span class="si">{</span><span class="n">addr</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">   详情: </span><span class="si">{</span><span class="n">details</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">   交易哈希: </span><span class="si">{</span><span class="n">tx</span><span class="p">[</span><span class="sh">'</span><span class="s">hash</span><span class="sh">'</span><span class="p">].</span><span class="nf">hex</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">   区块: </span><span class="si">{</span><span class="n">current_block</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>
            
            <span class="n">last_block_num</span> <span class="o">=</span> <span class="n">current_block</span>
        <span class="n">current_block</span> <span class="o">=</span> <span class="n">last_block_num</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c1"># 轮询间隔
</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">w3</span><span class="p">.</span><span class="nf">is_connected</span><span class="p">():</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">❌ 无法连接BSC</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">✅ 开始监控FORM工厂 </span><span class="si">{</span><span class="n">FACTORY_ADDRESS</span><span class="si">}</span><span class="s"> 的CREATE2部署（Etherscan V2 + chainid=56）...</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">monitor_factory_create2</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="后续优化">后续优化</h2>
<ul>
  <li>
    <p>这个程序仅仅只能基本实现找到新代币的功能，和DEX上的那些扫链功能完全不能比，DEX基本上都是和FOUR平台合作的，应该有平台提供的专用API，我这里是为了学习Web3，使用的都是免费的公共的节点和API。</p>
  </li>
  <li>
    <p>我在BscScan里看到每条哈希都有一个<code class="language-plaintext highlighter-rouge">Method</code>字段，在浏览器里可以看到<code class="language-plaintext highlighter-rouge">CreateToken</code>的方法。所以我想在轮询工厂合约的哈希时，先将CreateToken的方法的哈希分离出来，再对这些哈希进行提取操作，可以提高查询速度。
但是尝试了一下，暂时没有找到代码里辨别Method的方法，肯定是可以做到的，只不过需要时间去测试，后续可以优化这一点。</p>
  </li>
</ul>

<p><img src="../assets/img/posts/2025-10-15-bscscan/image-3.png" alt="alt text" /></p>

<ul>
  <li>公共的BSC节点很慢，然后Etherscan API的免费套餐也对每天的请求数量和速度有限制，如果有钱的话，可以买更好的套餐，还会有更方便的API可以使用。</li>
</ul>]]></content><author><name>赛狗屁</name></author><category term="Web3" /><category term="web3" /><category term="加密货币" /><summary type="html"><![CDATA[为什么要做这个 Python的web3库的练习 最近BSC的MEME很火，写这个工具玩一玩]]></summary></entry><entry><title type="html">炒币指标技术分析</title><link href="https://saigoupi.github.io/%E6%8A%95%E8%B5%84/Tech-Analysis.html" rel="alternate" type="text/html" title="炒币指标技术分析" /><published>2025-09-26T00:00:00+00:00</published><updated>2025-09-26T00:00:00+00:00</updated><id>https://saigoupi.github.io/%E6%8A%95%E8%B5%84/Tech-Analysis</id><content type="html" xml:base="https://saigoupi.github.io/%E6%8A%95%E8%B5%84/Tech-Analysis.html"><![CDATA[<h2 id="指数平滑移动平均线macd">指数平滑移动平均线（MACD）</h2>

<p>移动平均线收敛差异（MACD）是一种振荡类型的指标，该指标被交易者广泛用于技术分析（TA）中。MACD是一种趋势跟踪工具，利用移动平均线来确定股票、加密货币或其他可交易资产的走势。</p>

<h3 id="macd工作原理">MACD工作原理</h3>

<p>MACD指标通过将两个指数移动平均线（EMAs）相减生成主线（MACD线），然后再将其用于计算另一个表示信号线的指数移动平均线（EMA）。</p>

<p>此外，还有MACD直方图，它是根据这两条线之间的差异计算出来的。直方图以及其他两条线在中心线的上方和下方波动，中心线也称为零线。</p>

<p>因此，MACD指标由围绕零线移动的三个元素组成：</p>

<p>MACD线（1）：有助于确定向上或向下的走势（市场趋势）。它通过将两个指数移动平均值（EMA）相减计算而得。</p>

<p>信号线（2）：MACD线的EMA（周期间隔为9的EMA）。信号线与MACD线的组合分析有助于发现潜在的反转或进入和退出时机。</p>

<p>直方图（3）：MACD线和信号线的发散和收敛的图形表示。换句话说，是基于两条线之间的差异来计算直方图。</p>

<p><img src="../assets/img/posts/2025-9-26-Tech-Analysis/image.png" alt="alt text" /></p>

<h3 id="怎么看macd图">怎么看MACD图</h3>

<p>顾名思义，移动平均收敛差异指标关注移动平均线之间的关系，两条线之间的关系可以描述为收敛或发散。<strong>当两条线相互接近时则称为收敛，当它们互相分开时则为发散</strong>。</p>

<p>尽管如此，MACD指标相关信号与所谓的<strong>交叉点</strong>相关，这种交叉发生在MACD线穿过<strong>中心线</strong>（出现中心线交叉）之上或之下，高于或低于信号线（信号线交叉）时。</p>

<p>当MACD线在中心线上方或下方区域移动时，会发生中心线交叉。当它穿过中心线向上时，则为正向MACD，表明12天的EMA平均值大于26天。相反，当MACD线穿过中心线向下时，则为负向MACD，表明26天的EMA平均值高于12天。换句话说，<strong>正向MACD表示上行势头较强</strong>，而<strong>负向则表明下行势头较强</strong>。</p>

<p>当<strong>MACD线超过信号线</strong>时，交易者通常会认为存在潜在的<strong>买入机会</strong>（进入点）。另一方面，当MACD线穿过信号线<strong>向下</strong>时，交易者倾向于将其视为<strong>卖出机会</strong>（退出点）。</p>

<p>虽然信号线交叉信号可能有所帮助，但它们<strong>并不总是可靠</strong>的。我们同样需要考虑它们在<strong>图表中的位置</strong>，从而最大限度地降低风险。例如，如果信号线交叉出现买入信号，但MACD线指标低于中心线（负值），市场状况可能仍被视为看跌。相反，如果信号线交叉出现卖出信号，但MACD线指标高于中心线（正值），则市场状况仍可能看涨。在这种情况下，跟随信号交叉线的卖出信号则可能带来更多风险（更大下行的趋势）。</p>

<h3 id="macd和价格差异">MACD和价格差异</h3>

<p>除了中心线和信号线交叉外，还可以通过MACD图表和资产价格之间的差异来发现信号。</p>

<p>例如，如果加密货币的<strong>价格走势上升，但MACD出现一个较低的高点</strong>，我们就认为出现<strong>顶背离</strong>，这种情况表明尽管价格上涨，但上行势头（买入压力）并不如之前强劲。顶背离通常被解释为卖出机会，因为它们往往会出现于价格逆转之前。</p>

<p>相反，如果MACD线形成两个<strong>上升低点，与资产价格的两个下跌低点一致</strong>，那么被认为是<strong>底背离</strong>，表明尽管价格下跌，但购买压力更强。底背离如果出现在价格变化之前，可能表明短期底部将发生逆转（从下降趋势到上升趋势）。</p>

<h2 id="相对强弱指数rsi">相对强弱指数（RSI）</h2>

<h2 id="移动平均线ma">移动平均线（MA）</h2>

<h2 id="随即相对强弱指数stochrsi">随即相对强弱指数（StochRSI）</h2>

<h2 id="布林线bb">布林线（BB）</h2>

<h2 id="成交量可视范围vpvr">成交量可视范围（VPVR）</h2>]]></content><author><name>赛狗屁</name></author><category term="投资" /><category term="股票" /><category term="加密货币" /><summary type="html"><![CDATA[指数平滑移动平均线（MACD）]]></summary></entry><entry><title type="html">使用RVC克隆声音教程(AI唱歌)</title><link href="https://saigoupi.github.io/ai/RVC-tutorial.html" rel="alternate" type="text/html" title="使用RVC克隆声音教程(AI唱歌)" /><published>2025-08-31T00:00:00+00:00</published><updated>2025-08-31T00:00:00+00:00</updated><id>https://saigoupi.github.io/ai/RVC-tutorial</id><content type="html" xml:base="https://saigoupi.github.io/ai/RVC-tutorial.html"><![CDATA[<h2 id="准备材料">准备材料</h2>
<p>Windows系统</p>
<ul>
  <li>Python</li>
  <li>独立N卡</li>
</ul>

<h2 id="目标效果">目标效果</h2>
<p>本工具属于TTS大模型，训练完成的模型可以实现任意文本到目标语音的转换。<br />
我用十分钟的小当家语音训练后的效果可以参考我的小红书：<br />
<a href="https://www.xiaohongshu.com/explore/689ca47a000000001c0337e7?xsec_token=ABLHH3DhLOaE5legnyu-94WGoO5g_PIlXI6R_cDTSl72M=&amp;xsec_source=pc_user">小当家做红烧排骨</a></p>

<h2 id="教程">教程</h2>
<p>全程参考b站的教学视频即可，非常简单</p>

<p>AI语音生成零基础入门教学（GPT-Sovits）</p>
<div style="position: relative; padding: 30% 45%;">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?isOutside=true&amp;aid=113201312173790&amp;bvid=BV1nexGebELa&amp;cid=26008092788&amp;p=1&amp;high_quality=1" frameborder="no" scrolling="no"></iframe>
</div>
<p></p>
<p>仓库链接
<a href="https://github.com/RVC-Boss/GPT-SoVITS/blob/main/docs/cn/README.md">GPT-SoVITS仓库</a></p>]]></content><author><name>赛狗屁</name></author><category term="AI" /><category term="AI歌手" /><category term="RVC" /><summary type="html"><![CDATA[准备材料 Windows系统 Python 独立N卡]]></summary></entry><entry><title type="html">使用GPT-SoVITS克隆任意角色的声音</title><link href="https://saigoupi.github.io/ai/GPT-SoVITS.html" rel="alternate" type="text/html" title="使用GPT-SoVITS克隆任意角色的声音" /><published>2025-08-30T00:00:00+00:00</published><updated>2025-08-30T00:00:00+00:00</updated><id>https://saigoupi.github.io/ai/GPT-SoVITS</id><content type="html" xml:base="https://saigoupi.github.io/ai/GPT-SoVITS.html"><![CDATA[<h2 id="准备材料">准备材料</h2>
<p>Windows系统</p>
<ul>
  <li>Python</li>
  <li>独立N卡</li>
</ul>

<h2 id="目标效果">目标效果</h2>
<p>本工具属于TTS大模型，训练完成的模型可以实现任意文本到目标语音的转换。<br />
我用十分钟的小当家语音训练后的效果可以参考我的小红书：<br />
<a href="https://www.xiaohongshu.com/explore/689ca47a000000001c0337e7?xsec_token=ABLHH3DhLOaE5legnyu-94WGoO5g_PIlXI6R_cDTSl72M=&amp;xsec_source=pc_user">小当家做红烧排骨</a></p>

<h2 id="教程">教程</h2>
<p>全程参考b站的教学视频即可，非常简单</p>

<p>AI语音生成零基础入门教学（GPT-Sovits）</p>
<div style="position: relative; padding: 30% 45%;">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?isOutside=true&amp;aid=113201312173790&amp;bvid=BV1nexGebELa&amp;cid=26008092788&amp;p=1&amp;high_quality=1" frameborder="no" scrolling="no"></iframe>
</div>
<p></p>
<p>仓库链接
<a href="https://github.com/RVC-Boss/GPT-SoVITS/blob/main/docs/cn/README.md">GPT-SoVITS仓库</a></p>]]></content><author><name>赛狗屁</name></author><category term="AI" /><category term="AI" /><category term="GPT-SoVITS" /><summary type="html"><![CDATA[准备材料 Windows系统 Python 独立N卡]]></summary></entry><entry><title type="html">价值投资选股入门 - 三个基础指标</title><link href="https://saigoupi.github.io/%E6%8A%95%E8%B5%84/invest-stock-pick.html" rel="alternate" type="text/html" title="价值投资选股入门 - 三个基础指标" /><published>2025-08-20T00:00:00+00:00</published><updated>2025-08-20T00:00:00+00:00</updated><id>https://saigoupi.github.io/%E6%8A%95%E8%B5%84/invest-stock-pick</id><content type="html" xml:base="https://saigoupi.github.io/%E6%8A%95%E8%B5%84/invest-stock-pick.html"><![CDATA[<h2 id="财报中的三个表">财报中的三个表</h2>

<p>上期说了财报中的几个重要的表：<strong>资产负债表</strong>，<strong>利润表</strong>，<strong>现金流量表</strong>。</p>

<p>这些就像是一个人的身高体重一样，是公司最基本的数据。想要调研一家公司，最先看的就是财报中的这三张表。</p>

<p>表中的数据也各有侧重，想要快速分析一家公司，可以先看以下三个指标。</p>

<h3 id="资产负债率">资产负债率</h3>

<p>资产负债表是财报中最基础的表，可以分析公司的整体规模，表中主要展示了公司的资产、负债以及所有者权益。</p>

<p><strong>资产负债率</strong>则是表中的一项重要指标，资产负债表中，左边 = 资产 = 右边 = 负债 + 所有者权益。资产负债率体现的是企业的资产中有多少是借贷。如果资产负债率过高，那企业就是背负了巨额贷款在经营，无异于高空走钢丝，非常危险。</p>

<p><code class="language-plaintext highlighter-rouge">资产负债率 = 总负债/总资产</code></p>

<p>但是这个指标的评判标准也不固定，要以行业的平均值来做基准。因为像银行、地产这样的行业，贷款经营是商业模式的一环，所以资产负债率都很高。比如中国银行，常年都是91%左右；像一些百货零售企业，60%往下才算比较健康。而一些科技创业公司，则50%往下才算正常。</p>

<h3 id="毛利率">毛利率</h3>

<p>利润表反映的是企业的赚钱能力，其中<strong>毛利率</strong>这个指标，和净利率不同，毛利是销售收入-销售成本。</p>

<p><code class="language-plaintext highlighter-rouge">毛利率 = （销售收入-销售成本）/销售收入</code></p>

<p>体现的是公司业务的护城河能力。大家熟悉的餐饮行业的毛利率一般都是高于50%。即卖出一份产品，除去产品的成本后，到手的利润要大于50%。这部分利润之后还要减去人工房租等费用，才是实际赚到的钱，也就是净利润。</p>

<p>所以，毛利率越高，说明产品的附加值越高，公司业务的成本控制，供应链，品牌效应都比较好，不用低价内卷，有自己的护城河。同样的，这个指标的标准也要以行业平均值来看。制造业的毛利率有30%就很好了。消费行业则要高于40%才算正常。</p>

<h3 id="经营性现金流量净额">经营性现金流量净额</h3>

<p>上面两张表已经可以大致看出企业的实力，但是，企业经营中最最重要的东西，是现金流。赚钱能力再强，没有现金，企业就无法持续经营。所以现金流量表诞生了，这张表里记录了企业每一次经营的现金流变化，反映的是企业真实的现金流情况。</p>

<p>其中<strong>经营性现金流量净额</strong>这个指标，就可以表现出企业在实际经营中，到手了多少现金。</p>

<p>这个指标需要看企业的同比增长是否为正，如果逐年递增，说明企业的经营情况稳步向好。然后还需要和净利润去做比较。现金流量净额大于净利润的公司才是健康的公司。如果现金流净额小于净利润，说明企业的现金流萎缩，净利润中有非现金利润，比如赊账，然后就是企业可能有借款利息需要偿还，或者投资收益减少等等情况。</p>

<p>反正谨记现金流是企业的生命线，现金流不充裕的企业，肯定是有地方出了问题，这时候就要谨慎再谨慎。</p>

<h2 id="总结">总结</h2>

<p>先看企业的资产负债率，同比一下往年的数据，再看看行业的平均水平。剔除负债率过高的。然后查看企业的毛利率，一样同比往年数据和行业水平。然后再和经营性现金流量净额对比。这样过滤之后的公司就是一家有着稳定现金流和护城河，并且负债健康的公司。</p>

<p>但是，这三个指标也只是初级筛选，就像看一个人一样，外表好看，不代表真的是一个好人或者合适的人。筛选下来的公司，还需要根据具体情况具体分析。</p>]]></content><author><name>赛狗屁</name></author><category term="投资" /><category term="价值投资" /><category term="股票" /><summary type="html"><![CDATA[财报中的三个表]]></summary></entry><entry><title type="html">经济学统计学术语总结(持续更新中)</title><link href="https://saigoupi.github.io/%E6%8A%95%E8%B5%84/invest-economic-terms.html" rel="alternate" type="text/html" title="经济学统计学术语总结(持续更新中)" /><published>2025-08-15T00:00:00+00:00</published><updated>2025-08-15T00:00:00+00:00</updated><id>https://saigoupi.github.io/%E6%8A%95%E8%B5%84/invest-economic-terms</id><content type="html" xml:base="https://saigoupi.github.io/%E6%8A%95%E8%B5%84/invest-economic-terms.html"><![CDATA[<blockquote>
  <p><a href="https://www.stats.gov.cn/sj/ndsj/">国家统计局年鉴</a></p>

  <p><a href="https://sousuo.www.gov.cn/zcwjk/policyDocumentLibrary?q=&amp;t=zhengcelibrary&amp;orpro=">国务院政策文件库</a></p>
</blockquote>

<h2 id="同比和环比">同比和环比</h2>

<p><strong>增长速度</strong>是反映<strong>经济社会某一领域发展变化情况</strong>的重要指标，而<strong>同比</strong>和<strong>环比</strong>是反映增长速度最基础、最核心的指标，也是国际上通用的指标。在统计中，同比和环比通常是<strong>同比变化率</strong>和<strong>环比变化率</strong>的简称，用于表示某一事物在对比期内发展变化的方向和程度。</p>

<p><strong>同比</strong>是以上年同期为基期相比较，即<strong>本期</strong>某一时间段（点）与<strong>上年</strong>某一时间段（点）相比，可以理解为<strong>今年第n月</strong>与<strong>去年第n月</strong>的比较。同比增长率是指本期和上一年同期相比较的增长率，计算公式为：同比增长率＝（本期数－同期数）/同期数×100％。例如，某公司2022年上半年利润3000万元，为本期数，上年同期数是2021年上半年的利润2000万元，同比增长率为（3000－2000）/2000×100％＝50％，即某公司2022年上半年利润同比增长50％。</p>

<p><strong>环比</strong>是与上一个相邻统计周期相比较，表明统计指标逐期的发展变化，可以理解为<strong>第n月</strong>与<strong>第n－1月</strong>的比较。环比增长率是指<strong>本期</strong>和<strong>上期</strong>相比较的增长率，计算公式为：环比增长率＝（本期数－上期数）/上期数×100％。例如，某公司2022年6月份营业收入额为100万元，为本期数，上期数是2022年5月份营业额80万元，环比增长率为（100－80）/80×100％＝25％，即某公司2022年6月份营业额环比增长25％。</p>

<p><strong>环比</strong>侧重反映数据的<strong>短期变化</strong>。用环比增长速度反映指标变化时，时效性强，比较灵敏。比如，对居民消费价格指数（CPI）的环比涨跌幅进行分析，可以判断短期内物价变化的方向（上升或下降）。环比的不足之处是，对一些随着季节变化而波动的指标，将当期的数据直接与上期相比时，容易受到<strong>季节因素的干扰</strong>，使得用其反映的增长速度波动往往较大。比如，由于“双十一”促销影响，11月份网上零售额相比10月份增加较多，而12月份网上零售额相比11月份会减少较多，相应地，11月份的环比增长速度会比较高，而12月份的环比增长速度就可能是负的，但这并不能说明网上零售额发生了趋势性变化。所以进行环比计算之前一般需要先把经济指标变动中的季节性因素剔除掉，即进行季节调整后，再计算环比增长速度。</p>

<p><strong>同比</strong>相对于环比，侧重反映<strong>长期趋势</strong>，能够一定程度上克服季节性波动的影响。比如，同样是“双十一”促销，使用同比增长速度，10月、11月、12月的网上零售额增速波动不会像环比波动那样大，主要由于上年与今年11月“双十一”促销因素均存在。但另一方面，同比增长速度的缺点是易于受基期因素影响，比如，上年基期受灾害影响，数据波动大，而今年同期未受灾害影响，则同比增长速度会表现出波动变化。</p>

<p>总之，同比和环比所反映的虽然都是变化速度，但由于对比基期不同，反映的内涵不同。一般来说，环比可以与环比相比较，而不能拿同比与环比相比较。但是，对于同一个领域，当既要考虑历史发展趋势，又要考虑短期变化时，则应把同比与环比放在一起进行对照分析。</p>

<h2 id="第一第二第三产业">第一、第二、第三产业</h2>

<p>“第一产业”、“第二产业”和“第三产业”是中国国民经济的三大产业划分，分别代表不同的经济活动类型。</p>

<p>第一产业主要指农业、林业、牧业和渔业等直接利用自然资源的产业。</p>
<ul>
  <li>定义:直接利用自然资源，从事农、林、牧、渔等生产活动的产业。</li>
  <li>主要包括:种植业、林业、畜牧业、渔业等。</li>
  <li>特点:以获取自然资源为基础，产品多为初级产品。</li>
</ul>

<p>第二产业主要指采矿业、制造业、电力、燃气及水的生产和供应业，以及建筑业等，这些产业对原材料进行加工，生产出制成品。</p>

<ul>
  <li>定义:对第一产业提供的原材料进行加工，生产出制成品或进行能源生产的产业。</li>
  <li>主要包括:采矿业、制造业、电力、热力、燃气及水的生产和供应业，建筑业等。</li>
  <li>特点:以工业生产活动为主，是国民经济发展的重要支柱。</li>
</ul>

<p>第三产业则包括除第一和第二产业以外的其他所有行业，主要提供各种服务，如批发零售、交通运输、金融、教育、医疗等。</p>

<p><img src="https://github.com/SAIGOUPI/saigoupi.github.io/blob/master/assets/img/posts/2025-08-14-invest-economic-terms/image.png?raw=true" alt="" /></p>

<h2 id="上行风险和下行风险">上行风险和下行风险</h2>

<p>本为投资概念，在经济学中，也可以用于描述其他指标的变化，如通胀上行风险、就业下行风险。</p>

<p>上行风险和下行风险是从两个相反的角度来衡量投资的不确定性（即风险）。</p>

<ul>
  <li>
    <p>下行风险：指的是投资出现亏损的可能性（坏的不确定性）。这是传统意义上人们所理解的风险。</p>
  </li>
  <li>
    <p>上行风险：指的是投资表现远超预期的可能性（好的不确定性）。它衡量的是你可能会“错过”的潜在超额收益。</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: left">方面</th>
      <th style="text-align: left">下行风险</th>
      <th style="text-align: left">上行风险</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><strong>关注点</strong></td>
      <td style="text-align: left">亏损的可能性（不好的结果）</td>
      <td style="text-align: left">超越预期收益的可能性（好的结果）</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>核心问题</strong></td>
      <td style="text-align: left">“我可能会亏多少？”</td>
      <td style="text-align: left">“我可能会错过多少？”</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>传统视角</strong></td>
      <td style="text-align: left">这是需要避免和管理的“真正的风险”</td>
      <td style="text-align: left">这常被视为“机会”而非风险</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>现代视角</strong></td>
      <td style="text-align: left">是风险的一个方面</td>
      <td style="text-align: left">是风险的另一面，代表潜在机会成本</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>投资者偏好</strong></td>
      <td style="text-align: left">几乎所有投资者都希望规避</td>
      <td style="text-align: left">因人而异：保守者规避，进取者追求</td>
    </tr>
  </tbody>
</table>

<p>在<strong>经济学指标</strong>中，通胀上行风险指的是，未来通货膨胀率高于当前预期水平（或政策目标水平）的可能性与严重程度。</p>

<p><strong>当前经济面临显著的通胀上行风险</strong>则表示：专家们非常担心，由于某些因素的存在，未来的通货膨胀情况可能会比现在大家预估的更加严峻，这将迫使央行采取更严厉的手段来应对。比如加息，收紧货币政策。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">术语</th>
      <th style="text-align: left">含义</th>
      <th style="text-align: left">关注点</th>
      <th style="text-align: left">通常对应的政策倾向</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">通胀上行风险</td>
      <td style="text-align: left">通胀率高于预期的可能性</td>
      <td style="text-align: left">“通胀会不会失控？会不会比想的更糟？”</td>
      <td style="text-align: left">鹰派（倾向于加息、收紧货币）</td>
    </tr>
    <tr>
      <td style="text-align: left">通胀下行风险</td>
      <td style="text-align: left">通胀率低于预期的可能性</td>
      <td style="text-align: left">“经济会不会太冷？会不会陷入通缩？”</td>
      <td style="text-align: left">鸽派（倾向于降息、刺激经济）</td>
    </tr>
  </tbody>
</table>

<h2 id="流动资产和非流动资产">流动资产和非流动资产</h2>

<h3 id="流动资产">流动资产</h3>

<p>流动资产是指企业在一个营业周期内（通常为一年）可以转换为现金或被消耗的资产。具体包括：</p>
<ul>
  <li><strong>货币资金</strong>：包括库存现金和银行存款等，是企业流动性最强的资产。</li>
  <li><strong>应收账款</strong>：因销售商品或提供劳务而形成的债权，是流动资产的重要组成部分。</li>
  <li><strong>存货</strong>：企业为了销售或生产而储备的物资，包括原材料、在产品、半成品和成品等。</li>
  <li><strong>短期投资</strong>：指企业购入能够随时变现并且持有时间不超过一年的投资，如购买国债等。</li>
  <li><strong>其他应收款</strong>：包括预付款项和其他应收款项等。</li>
</ul>

<h3 id="非流动资产">非流动资产</h3>

<p>非流动资产是指不能在一个营业周期内变现或耗用的资产，通常具有较长的使用寿命。具体包括：</p>
<ul>
  <li><strong>固定资产</strong>：企业长期使用并持有的资产，如房屋、机器设备等，使用寿命超过一个会计年度。</li>
  <li><strong>长期投资</strong>：企业长期持有的投资，如股权投资等，通常持有时间超过一年。</li>
  <li><strong>无形资产</strong>：企业拥有但没有实物形态的资产，如专利、商标、版权等。</li>
  <li><strong>在建工程</strong>：正在建设中的固定资产，尚未投入使用的部分。</li>
  <li><strong>长期待摊费用</strong>：指企业已经发生但尚未在当期费用中摊销的费用。</li>
</ul>]]></content><author><name>赛狗屁</name></author><category term="投资" /><category term="经济学" /><category term="投资" /><category term="统计学" /><summary type="html"><![CDATA[国家统计局年鉴 国务院政策文件库]]></summary></entry><entry><title type="html">价值投资选股入门 - 企业盈利能力指标</title><link href="https://saigoupi.github.io/%E6%8A%95%E8%B5%84/invest-profitability-research.html" rel="alternate" type="text/html" title="价值投资选股入门 - 企业盈利能力指标" /><published>2025-08-14T00:00:00+00:00</published><updated>2025-08-14T00:00:00+00:00</updated><id>https://saigoupi.github.io/%E6%8A%95%E8%B5%84/invest-profitability-research</id><content type="html" xml:base="https://saigoupi.github.io/%E6%8A%95%E8%B5%84/invest-profitability-research.html"><![CDATA[<h2 id="小白进来能先看什么">小白进来能先看什么？</h2>

<h3 id="公司财报">公司财报</h3>

<p>先不要管财报造假什么的，这些问题自有监管来查。上市公司的财报还是具有很强的参考性的，而且作为韭菜来说，财报是了解公司的主要手段。先学会看财报，再进一步深入。</p>

<h3 id="简单的会计学">简单的会计学</h3>

<p>财报中的几个重要的表：<strong>资产负债表</strong>，<strong>利润表</strong>，<strong>现金流量表</strong>。这几个表都是会计学知识，先简单学习一下这些表的定义和制作方法，再来看财报中的各个指标，事半功倍。</p>

<h3 id="财报中的重要指标">财报中的重要指标</h3>

<p>如何判断一个公司好不好的很重要的点，就是看这个公司能不能持续地制造高额利润，找到这样的公司，在合理的价位买入，就可以远离市场涨跌，从对其的投资中获得回报。</p>

<p>那么如何通过财报来看出一个公司的赚钱能力？以下指标可以用作参考。注意<strong>单看一个指标是没有用的！</strong> 一个上市公司的构成非常复杂，无法通过几个指标就看透一个公司的真实情况，一切指标都只是基于基本面进行合理分析，辅助自己进行决策！</p>

<p>多分析，多动脑，锻炼自己的思维能力，提升认知，不做跟风的韭菜。</p>

<p>下面看看这些指标。</p>

<p><strong>净利润率</strong></p>

<p><code class="language-plaintext highlighter-rouge">净利润/营业收入</code></p>

<p>净利润就是毛利润扣除营业费用，税收以及其他杂费后公司到手的利润，是实打实赚到的钱。毛利润就是营业收入减去营业成本后所得的利润，比如一个商品进价成本6块，售价10块，毛利就是4块，毛利率就是40%，不算人工交通运输管理等等各项费用。</p>

<p>所以有些公司的毛利率很高，说明公司的业务能力很强，资源强，公司的产品有护城河，能将毛利率拉到很高。但是一看净利率却很低，说明公司的业务中，杂费太多，可能是公司的管理有冗余或是公司研发投入很大，导致净利润太少。</p>

<p>所以净利润能很大程度上反映一个公司的赚钱能力，比如茅台的净利率就超过50%。</p>

<p><strong>四项费用率</strong></p>

<p>上面说了影响净利润率的重要部分就是营业费用，细分一下就是</p>
<ul>
  <li>管理费用-房租水电人工</li>
  <li>财务费用-金融利息</li>
  <li>销售费用-广告营销</li>
  <li>研发费用-产品研发</li>
</ul>

<p>这四项费用率就可以体现公司的管理能力，可能公司毛利率不高，但是出色的管理依然可以控制成本，提高净利率。</p>

<p><strong>营业收入增长率</strong></p>

<p><code class="language-plaintext highlighter-rouge">今年营业收入/去年营业收入 - 1</code></p>

<p>营业收入增长率一般是看行业，有的新兴行业，增长率爆炸，而有些夕阳产业，业务成熟稳定，增长率自然不高。
增长率大于10%就可以算成长股了，小于5%就算夕阳产业了。如果一个企业的增长率连年下降，那就要先看看他所处行业，是否整体受到了冲击，如果没有，那自然是企业经营出现了问题。</p>

<h3 id="总结">总结</h3>

<p>先看净利润率，然后看四项费用率，最后看营业收入增长率，一步步筛选。最后合格的就是一家赚钱能力强，管理好，成长性高的企业。</p>

<p><strong>当然这还远远不够，财报中还有其他的坑。</strong> 下期再分析。</p>]]></content><author><name>赛狗屁</name></author><category term="投资" /><category term="价值投资" /><category term="股票" /><summary type="html"><![CDATA[小白进来能先看什么？]]></summary></entry><entry><title type="html">CE（Cheat Engine）本地编译教程</title><link href="https://saigoupi.github.io/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/CE-localbuild.html" rel="alternate" type="text/html" title="CE（Cheat Engine）本地编译教程" /><published>2025-08-07T00:00:00+00:00</published><updated>2025-08-07T00:00:00+00:00</updated><id>https://saigoupi.github.io/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/CE-localbuild</id><content type="html" xml:base="https://saigoupi.github.io/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/CE-localbuild.html"><![CDATA[<h2 id="为什么要本地编译ce">为什么要本地编译CE？</h2>

<p>Cheat Engine（CE）是一个内存操控工具，可以通过修改扫描内存，并修改指定内存的数值的方式来修改游戏内数值，达到作弊的效果。大部分人都是用其来进行单机游戏的数值修改，我最近在玩怪物猎人荒野，到后期实在是不想刷了，于是也开始研究这些作弊工具。</p>

<p>CE官方其实提供了安装文件，不用自己编译。可是看网上说这个安装程序，会捆绑安装一些其他的流氓软件（可以在安装时通过勾选不安装），本来我对CE这类“开挂软件”就不太了解，所以还是有一些防备心理的。CE官方安装程序捆绑一些软件，也是为了生计着想，毕竟人家是免费开源软件。</p>

<p>另外，CE的Github上也有本地编译的步骤说明，稍微研究一下，发现整个过程也很简单。有源码，有教程，本地编一下其实也很快，而且还更加放心。</p>

<h2 id="前期准备">前期准备</h2>

<p>CE的Github官方库下载最新的release源码</p>

<p><a href="https://github.com/cheat-engine/cheat-engine/releases/tag/7.5">cheat-engine官方Git仓库</a></p>

<p>根据官方的README要求，下载 <code class="language-plaintext highlighter-rouge">Lazarus</code> IDE</p>

<p><a href="https://sourceforge.net/projects/lazarus/files/Lazarus%20Windows%2064%20bits/Lazarus%202.2.2/">Lazarus官方下载</a></p>

<div class="premonition info"> <div class="header"> <svg class="icon info" aria-hidden="true"> <use xlink:href="#icon-info"></use> </svg> <div class="title"> Lazarus是什么？ </div> </div> <div class="content"> <p>Lazarus 并不是一个编译器，而是一个 Free Pascal 编译器 的集成开发环境(IDE)。它基于Free Pascal 编译器，用于开发跨平台的应用程序，特别是使用 Object Pascal 语言的图形用户界面(GUI) 应用程序。简单来说，Lazarus 提供了一个可视化界面，让开发者可以像使用Delphi 一样方便地开发应用程序，而背后实际执行编译工作的，是Free Pascal 编译器。</p>



 </div> </div>
<p>按照如下要求分别下载两个exe安装文件</p>
<blockquote>
  <p>The default installer is:</p>

  <p><code class="language-plaintext highlighter-rouge">lazarus-2.2.2-fpc-3.2.2-win64.exe</code></p>

  <p>You should download this file, if you want to work on any Windows 64 bit version.
The installers include FPC 3.2.2.2 and they include the Lazarus help files.</p>

  <p>Add-On for building and debugging 32bit Windows applications:</p>

  <p><code class="language-plaintext highlighter-rouge">lazarus-2.2.2-fpc-3.2.2-cross-i386-win32-win64.exe</code></p>

  <p>This file can be installed as add-on to the 64 bit Lazarus IDE (on Systems with Windows 64 bit only), if you wish to develop for 32bit Windows too.</p>
</blockquote>

<p>首先运行第一个exe，安装完毕后，再运行第二个exe安装额外功能。</p>

<h2 id="ce软件编译">CE软件编译</h2>

<p>打开Lazarus，任务栏中打开<code class="language-plaintext highlighter-rouge">Project-&gt; Open Project</code>，在下载的源码中找到<code class="language-plaintext highlighter-rouge">Cheat Engine</code>文件夹下<code class="language-plaintext highlighter-rouge">cheatengine.lpi</code>的文件，双击就可以打开CE的工程了。</p>

<p><img src="/assets/img/posts/2025-08-07-CE-localbuild/image.png" alt="Lazarus打开项目" /></p>

<p>任务栏左上角在编译的地方更换目标版本，win11就用<code class="language-plaintext highlighter-rouge">Release 64-Bit</code>即可。</p>

<p><img src="/assets/img/posts/2025-08-07-CE-localbuild/image-3.png" alt="更换64位版本" /></p>

<p>最后任务栏点击<code class="language-plaintext highlighter-rouge">Run-&gt; Build</code>就会开始编译了，显示绿色Success就是编译好了，然后到<code class="language-plaintext highlighter-rouge">Cheat Engine\bin</code>路径下，找到<code class="language-plaintext highlighter-rouge">cheatengine-x86_64.exe</code>，双击运行就会启动CE软件了。</p>

<p><img src="/assets/img/posts/2025-08-07-CE-localbuild/image-4.png" alt="编译成功" /></p>

<h2 id="ce教程小游戏编译">CE教程小游戏编译</h2>

<p>CE软件已经可以直接用了，使用教程在网上一搜一大堆。</p>

<p>另外为了方便用户入门，CE自己还专门做了一个教程小游戏，可以让用户边学边玩，教程也是一个单独的工程，还是同样的打开工程，找到路径<code class="language-plaintext highlighter-rouge">Cheat Engine/Tutorial</code>下的<code class="language-plaintext highlighter-rouge">tutorial.lpi</code>工程，双击打开</p>

<p><img src="/assets/img/posts/2025-08-07-CE-localbuild/image-5.png" alt="打开教程工程" /></p>

<p>和上面同样的操作，选择版本后点击编译，这时可能会有如下报错:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>newvirtualstringtree.pas(8,32) Fatal: Cannot find laz.VirtualTrees used by newvirtualstringtree. Check if package laz.virtualtreeview_package is in the dependencies.
</code></pre></div></div>

<p>很简单，就是项目缺少依赖，按照以下步骤添加依赖包<code class="language-plaintext highlighter-rouge">laz.virtualtreeview_package</code>即可</p>
<blockquote>
  <p>Go to “Project” in the top left and then click “Project Inspector”.
Click on the Add button with the plus.
Select the page New Requirement.
Write “laz.virtualtreeview_package” into the “Package-Name” field.
Click Ok.</p>
</blockquote>

<p><img src="/assets/img/posts/2025-08-07-CE-localbuild/image-6.png" alt="添加依赖" /></p>

<p><img src="/assets/img/posts/2025-08-07-CE-localbuild/image-7.png" alt="添加依赖" /></p>

<p><img src="/assets/img/posts/2025-08-07-CE-localbuild/image-8.png" alt="添加依赖" /></p>

<p>然后再重新编译，成功之后在CE软件的同路径下，找到<code class="language-plaintext highlighter-rouge">tutorial-x86_64.exe</code>，双击就可以打开教程小游戏了</p>

<p><img src="/assets/img/posts/2025-08-07-CE-localbuild/image-9.png" alt="CE教程小游戏" /></p>]]></content><author><name>赛狗屁</name></author><category term="游戏开发" /><category term="Cheat Engine" /><category term="Game" /><summary type="html"><![CDATA[为什么要本地编译CE？]]></summary></entry><entry><title type="html">关于博客主题的思考</title><link href="https://saigoupi.github.io/%E5%8D%9A%E5%AE%A2/new-blog-theme.html" rel="alternate" type="text/html" title="关于博客主题的思考" /><published>2025-07-28T00:00:00+00:00</published><updated>2025-07-28T00:00:00+00:00</updated><id>https://saigoupi.github.io/%E5%8D%9A%E5%AE%A2/new-blog-theme</id><content type="html" xml:base="https://saigoupi.github.io/%E5%8D%9A%E5%AE%A2/new-blog-theme.html"><![CDATA[<h2 id="新的主题">新的主题</h2>

<p>我放弃了之前的<a href="https://github.com/jeffreytse/jekyll-theme-yat">Jekyll-Yat主题</a>，换成了现在的<a href="https://github.com/zhonger/jekyll-theme-H2O-ac">H2O-ac主题</a>，先就这样吧，不折腾了，准备安心写文了。</p>

<p><code class="language-plaintext highlighter-rouge">Yat</code>这个主题各方面都很好，甚至还支持了视频的markdown链接。</p>

<p>可是我疏忽了最关键的一点，就是<strong>代码框</strong>的样式。</p>

<p>我用上之后才发现默认的样式很丑，然后我开始找配置，改样式，因为我对web前端不了解，所以全程让AI帮我改，改了两天，什么rouge，什么css都改了一便，可是最终还是不满意。我觉得我在这个牛角尖里越钻越深了，所以我索性换成了现在的<code class="language-plaintext highlighter-rouge">H20</code>主题。</p>

<p>在搭建博客这个事情上，我已经花了快一周的时间了，每次看到个新主题，我都想东改改西改改，折腾了一圈，jekyll的模板和框架都了解一遍，可是离我本来要做的事情越来越远。</p>

<p>说回博客的主题，主题再花哨也是空壳，写博客最关键的还是内容，选个能用的主题，搭上直接开始写文，才是最重要的事情。</p>

<h2 id="一些思考">一些思考</h2>
<p>我个人有些强迫行为，在搭博客这件事情上也有所体现，换到<code class="language-plaintext highlighter-rouge">H20</code>主题过程中，我也在SNS图标上纠结了好久，去看了主题的源码，了解了IconFont，对Jekyll的模板的认识也加深了。然后又想在博客园上同步文章，引发了图床，防盗链这些问题，于是又去看解决方案。因为我对web的了解很少，所以每一个知识点都是新的，每一个知识点又引出新的点，吸引我不断往下看。这些知识未来或许有用，但是现在都不是最高优先级。</p>

<p>纠结了半天，只为换一个图标，传一张图片，我意识到自己又在钻牛角尖后，果断停止这一切，停止纠结这些表面的东西，开始按照计划学习新东西，打开vscode开始写文档，这些才是我的最高优先级。</p>

<p>认识自己，才能改变自己。谨防提升技术的道路上这些吹毛求疵的行为，不要让他们影响到真正重要的事情。</p>]]></content><author><name>赛狗屁</name></author><category term="博客" /><category term="Jekyll" /><category term="博客" /><summary type="html"><![CDATA[新的主题]]></summary></entry><entry><title type="html">使用Github Pages + Jekyll搭建个人博客</title><link href="https://saigoupi.github.io/%E5%8D%9A%E5%AE%A2/build-blog.html" rel="alternate" type="text/html" title="使用Github Pages + Jekyll搭建个人博客" /><published>2025-07-23T00:00:00+00:00</published><updated>2025-07-23T00:00:00+00:00</updated><id>https://saigoupi.github.io/%E5%8D%9A%E5%AE%A2/build-blog</id><content type="html" xml:base="https://saigoupi.github.io/%E5%8D%9A%E5%AE%A2/build-blog.html"><![CDATA[<h2 id="写在开头">写在开头</h2>

<p>最近在研究使用GitHub Pages搭建博客，好处有两点：</p>
<ul>
  <li>免费，简单，不用租服务器买域名，一键部署</li>
  <li>教程多，出问题方便在网上找解决方案</li>
</ul>

<p>GitHub Pages也支持很多博客框架，这里我用的官方推荐的Jekyll，当然用其他的Hexo，gitbook等等也都是可以的，网上教程也很多，部署流程也大同小异。</p>

<p>今天总结一下我的搭建过程，以及中途遇到的一些坑，照着这篇文档，应该能一次搭建成功。</p>

<h2 id="参考文档">参考文档</h2>

<p>如果只是搭建一个最简单的博客，直接参考官方教程和以下教程即可，十分钟搞定直接开写：</p>

<ul>
  <li>
    <p><a href="https://blog.csdn.net/zzy979481894/article/details/132678717">使用Jekyll + GitHub Pages搭建个人博客</a></p>
  </li>
  <li>
    <p><a href="https://docs.github.com/zh/pages/quickstart">GitHub Pages快速入门</a></p>
  </li>
</ul>

<p>但是刚开始搭建博客时，总喜欢折腾一些好看的主题，Jekyll的主题很多，更换主题也很方便，但是还是会有一些小坑。</p>

<p>最主要的问题就是<a href="https://docs.github.com/zh/actions/tutorials">GitHub Action</a>的配置，Jekyll可以使用在线主题，但是github默认支持的在线主题很少，如果想用其他的主题，就要修改博客项目中的默认的Action和workflow的配置，保证博客仓库有更新时，github可以自动部署博客到网页上。</p>

<p>解决问题的方式很简单，只是第一次遇到有点懵而已。具体参考了以下链接：</p>

<ul>
  <li>
    <p>在这里找到自己喜欢的主题：<a href="http://jekyllthemes.org/">Jekyll主题大全</a></p>
  </li>
  <li>
    <p>我使用的主题：<a href="https://github.com/jeffreytse/jekyll-theme-yat">Jekyll-yat主题</a></p>
  </li>
  <li>
    <p>使用以上主题时，需要使用配套的Github Action配置：<a href="https://github.com/jeffreytse/jekyll-deploy-action">A GitHub Action to deploy the Jekyll site conveniently for GitHub Pages</a></p>
  </li>
  <li>
    <p>安装Jekyll：<a href="https://jekyllrb.com/docs/installation/windows/">Jekyll On Windows</a></p>
  </li>
</ul>

<p>一些疑难杂症的解决方案：</p>
<ul>
  <li>
    <p><a href="https://www.ixiqin.com/2023/02/18/how-to-deal-with-making-the-action-report-remote-permission-denied-to-xx-x-to-making-the-actions-bot-problem/">如何处理 Github Action 报出的 remote: Permission to xx x denied to github-actions[bot] 问题</a></p>
  </li>
  <li>
    <p><a href="https://github.com/jeffreytse/jekyll-theme-yat/issues/177">Error: Invalid CSS after “ @if meta”: expected “{“, was “.function-exist…” on line 72</a></p>
  </li>
  <li>
    <p><a href="https://github.com/jeffreytse/jekyll-theme-yat/issues/173">css conversion error with github pages</a></p>
  </li>
</ul>

<h2 id="安装jekyll">安装Jekyll</h2>

<p>先在Ruby官网下载安装Ruby</p>

<p><a href="https://jekyllrb.com/docs/installation/windows/">Jekyll On Windows</a></p>

<p>在安装最后一步勾选以下选项</p>

<p><img src="/assets/img/posts/2025-07-23-build-blog/image.png" alt="" /></p>

<p>在命令行中选3</p>

<p><img src="/assets/img/posts/2025-07-23-build-blog/image-1.png" alt="" /></p>

<p>检查是否安装成功，windows命令行运行</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby <span class="nt">-v</span>
gem <span class="nt">-v</span>
</code></pre></div></div>

<p>然后更换ruby源为国内源，因为ruby默认的官方源在国外，不用梯子的话，下载速度非常慢！所以先更换为国内源，再下载Jekyll，打开命令行，输入以下命令添加ruby国内源</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem sources <span class="nt">-a</span> https://gems.ruby-china.com/
</code></pre></div></div>

<p>然后输入以下命令移除官方源</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem sources <span class="nt">-r</span> https://rubygems.org/
</code></pre></div></div>

<p>最后使用以下命令查看已有的源</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem sources <span class="nt">-l</span>
</code></pre></div></div>

<p><img src="/assets/img/posts/2025-07-23-build-blog/image-3.png" alt="" /></p>

<p>接下来就可以安装Jekyll了，使用以下命令</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>jekyll bundler
</code></pre></div></div>

<p>提示安装完成后，检查是否安装成功</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll <span class="nt">-v</span>
</code></pre></div></div>

<p>至此Jekyll安装完成</p>

<h2 id="安装jekyll-yat主题">安装Jekyll-Yat主题</h2>

<p>在github上新建一个博客仓库，克隆或者直接下载此主题的zip包<a href="https://github.com/jeffreytse/jekyll-theme-yat">Jekyll-yat主题</a>，将此项目中的所有文件复制到自己的博客仓库。</p>

<p>参考<a href="https://github.com/SAIGOUPI/yat-blog/commit/98e81254675ddf3308b2312be9e81b284fefb584">Jekyll-yat主题本地调试修改</a>这个提交的修改，在<code class="language-plaintext highlighter-rouge">Gemfile</code>文件中再修改一次国内源，并添加<code class="language-plaintext highlighter-rouge">gem "logger", "~&gt; 1.7"</code>和
<code class="language-plaintext highlighter-rouge">gem "bigdecimal", "~&gt; 3.2"</code>，修改后完整文件如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> <span class="s2">"https://gems.ruby-china.com/"</span>
gemspec

gem <span class="s2">"logger"</span>, <span class="s2">"~&gt; 1.7"</span>

gem <span class="s2">"bigdecimal"</span>, <span class="s2">"~&gt; 3.2"</span>
</code></pre></div></div>

<p>然后在根目录启动命令行，输入命令</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">install</span>
</code></pre></div></div>

<p>开始在本地添加博客网站运行的依赖项，提示安装完成后，执行命令</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<p>就可以在本地<code class="language-plaintext highlighter-rouge">http://127.0.0.1:4000</code>访问渲染后的博客网站</p>

<p><img src="/assets/img/posts/2025-07-23-build-blog/image-2.png" alt="" /></p>

<p>至此，Yat主题初始化完毕</p>

<h2 id="部署博客到github-pages">部署博客到GitHub Pages</h2>

<p>来到自己的博客仓库，在<code class="language-plaintext highlighter-rouge">Settings</code>里第一行，修改仓库名字成<code class="language-plaintext highlighter-rouge">username.github.io</code>，<code class="language-plaintext highlighter-rouge">username</code>就是github的账户名。一定要按照这个格式输入，这个名字也是访问此博客的域名。</p>

<p><img src="/assets/img/posts/2025-07-23-build-blog/image-4.png" alt="" /></p>

<p>在部署GitHub Pages前，先回到自己的仓库，新建一个分支<code class="language-plaintext highlighter-rouge">gh-pages</code>，这个分支就用来部署博客页面。</p>

<p><img src="/assets/img/posts/2025-07-23-build-blog/image-5.png" alt="" /></p>

<p>分支创建完毕后，回到<code class="language-plaintext highlighter-rouge">master</code>分支上，需要修改一个文件<code class="language-plaintext highlighter-rouge">build-jekyll.yml</code>，路径如下：</p>

<p><img src="/assets/img/posts/2025-07-23-build-blog/image-6.png" alt="" /></p>

<p>然后将以下内容覆盖到<code class="language-plaintext highlighter-rouge">build-jekyll.yml</code>中，此配置来自Yat主题的作者</p>

<p><a href="https://github.com/jeffreytse/jekyll-deploy-action">A GitHub Action to deploy the Jekyll site conveniently for GitHub Pages</a></p>

<p>使用此Action就可以在master分支有更新时，通知github自动更新并部署博客页面到网站上，并且此配置也支持大部分Jekyll主题，部署时不会有报错：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Build and Deploy to Github Pages</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">master</span>  <span class="c1"># Here source code branch is `master`, it could be other branch</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build_and_deploy</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>

      <span class="c1"># Use GitHub Actions' cache to cache dependencies on servers</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">path</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">.asdf/**</span>
            <span class="s">vendor/bundle</span>
          <span class="na">key</span><span class="pi">:</span> <span class="s">${{ runner.os }}-cache-${{ hashFiles('**/cache.key') }}</span>
          <span class="na">restore-keys</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">${{ runner.os }}-cache-</span>

      <span class="c1"># Use GitHub Deploy Action to build and deploy to Github</span>
      <span class="c1"># For latest version: `jeffreytse/jekyll-deploy-action@master`</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">jeffreytse/jekyll-deploy-action@v0.6.0</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">provider</span><span class="pi">:</span> <span class="s1">'</span><span class="s">github'</span>         <span class="c1"># Default is github</span>
          <span class="na">token</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span> <span class="c1"># It's your Personal Access Token(PAT)</span>
          <span class="na">repository</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>             <span class="c1"># Default is current repository</span>
          <span class="na">branch</span><span class="pi">:</span> <span class="s1">'</span><span class="s">gh-pages'</span>         <span class="c1"># Default is gh-pages for github provider</span>
          <span class="na">jekyll_src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">./'</span>           <span class="c1"># Default is root directory</span>
          <span class="na">jekyll_cfg</span><span class="pi">:</span> <span class="s1">'</span><span class="s">_config.yml'</span>  <span class="c1"># Default is _config.yml</span>
          <span class="na">jekyll_baseurl</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>         <span class="c1"># Default is according to _config.yml</span>
          <span class="na">ruby_ver</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>               <span class="c1"># Default is 3.2.0 version</span>
          <span class="na">bundler_ver</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>            <span class="c1"># Default is compatible bundler version (~&gt;2.5.0)</span>
          <span class="na">cname</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>                  <span class="c1"># Default is to not use a cname</span>
          <span class="na">actor</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>                  <span class="c1"># Default is the GITHUB_ACTOR</span>
          <span class="na">pre_build_commands</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>     <span class="c1"># Installing additional dependencies (Arch Linux)</span>
</code></pre></div></div>

<p>然后又来到项目的<code class="language-plaintext highlighter-rouge">Settings</code>中，进入<code class="language-plaintext highlighter-rouge">Action</code>-<code class="language-plaintext highlighter-rouge">General</code>路径中，找到<code class="language-plaintext highlighter-rouge">Workflow permission</code>，设置为<code class="language-plaintext highlighter-rouge">Read and write permissions</code>。这样在部署时，github就不会有无法操作仓库的权限问题了。</p>

<p><img src="/assets/img/posts/2025-07-23-build-blog/image-7.png" alt="" /></p>

<p>最后一步了！进入<code class="language-plaintext highlighter-rouge">Pages</code>路径，选择<code class="language-plaintext highlighter-rouge">Deploy from a branch</code>，然后选择<code class="language-plaintext highlighter-rouge">gh-pages</code>，保存修改，大功告成~！</p>

<p><img src="/assets/img/posts/2025-07-23-build-blog/image-8.png" alt="" /></p>

<p>来到仓库的<code class="language-plaintext highlighter-rouge">Action</code>页面，找到刚刚修改的Action，点击右侧Run workflow，启动部署流程，部署完成后，可以在下面的<code class="language-plaintext highlighter-rouge">pages-build-deployment</code>里看到，<code class="language-plaintext highlighter-rouge">gh-pages</code>分支已经部署完成</p>

<p><img src="/assets/img/posts/2025-07-23-build-blog/image-9.png" alt="" /></p>

<p><img src="/assets/img/posts/2025-07-23-build-blog/image-10.png" alt="" /></p>

<p>然后访问域名<code class="language-plaintext highlighter-rouge">username.github.io</code>就可以访问自己的博客了~!</p>

<h2 id="本地写博客并更新到网站">本地写博客并更新到网站</h2>

<p>在本地仓库内根目录下<code class="language-plaintext highlighter-rouge">\_posts</code>文件内，新建<code class="language-plaintext highlighter-rouge">date-blogTitle.md</code>文件，<code class="language-plaintext highlighter-rouge">date</code>是日期，<code class="language-plaintext highlighter-rouge">blogTitle</code>是文章标题，打开文件，在文章顶部填写基本信息</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">Another test markdown</span>
<span class="na">subtitle</span><span class="pi">:</span> <span class="s">Each post also has a subtitle</span>
<span class="na">categories</span><span class="pi">:</span> <span class="s">markdown</span>
<span class="na">tags</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">test</span><span class="pi">]</span>
<span class="nn">---</span>
</code></pre></div></div>

<p>具体格式，可以参考<code class="language-plaintext highlighter-rouge">\_posts</code>文件内的其他实例文章，都是主题自带的案例，有图片，视频，Jekyll的基本格式，markdown基础语法等例子可以参考。</p>

<p>写好文章后，推送到github仓库上，就会触发Action的workflow，工作流执行完毕后（大约3分钟），就可以访问域名，查看更新后的博客了~</p>

<p>至此，就已经成功搭建起自己的博客了，完事开头难，基础搭建起来后，之后的各种玩法的探索才有了可能。接下来可以专注于博客的写作上，可以参考markdown的语法:</p>

<p><a href="https://markdown.com.cn/basic-syntax/htmls.html">Markdown语法</a></p>

<p>也可以美化一下自己的博客，学习一下Jekyll主题的修改和制作</p>

<h2 id="写在最后">写在最后</h2>

<p>搭建博客时还是踩了不少坑，所以深知能从零搭起来才是最重要的，其他花里胡哨的外观主题都是次要的。按照这篇文章，应该能顺利地一次性搭建起来，如果有问题，可以看看这个仓库，里面的提交和文件都可以参考。</p>

<p><a href="https://github.com/SAIGOUPI/yat-blog">Yat主题博客案例仓库</a></p>

<p>另外，现在的我在用vscode写这篇文章时，发现vscode写markdown真的非常方便，原生就支持直接粘贴图片到文章内，附上文档链接</p>

<p><a href="https://juejin.cn/post/7244809769794289721">vscode支持Markdwon中直接粘贴图片</a></p>

<p>感谢看到这里~！!</p>]]></content><author><name>赛狗屁</name></author><category term="博客" /><category term="Jekyll" /><category term="博客" /><summary type="html"><![CDATA[写在开头]]></summary></entry></feed>